{"/":{"title":"Introduction","data":{"":"","what-is-roq-about#What is ROQ about?":"ROQ is based on the observation that most modern SaaS applications have the same main features. Although these\ncommodities alone won't make you unique, users still expect them, so you should offer them early. The challenge is that\nthese commodities are hard to implement and could easily waste your time and engineering capacity.ROQ solves this challenge by offering ready-to-use UI components and APIs for all essential features you need to build\nyour SaaS application: authentication, authorization, user management, a real-time chat,\nnotifications, file management, and many more.","how-does-roq-work#How does ROQ work?":"ROQ consists of two main parts: Functional UI Components and a Headless ROQ Platform","functional-ui-components#Functional UI Components":"ROQ provides a set of fully-functional and highly customizable UI components that you can easily integrate into your\napplication.","headless-roq-platform#Headless ROQ Platform":"ROQ Platform represents the backend for the UI components. In addition, ROQ Platform provides\nGraphQL APIs that you can leverage to build your custom logic.","getting-started#Getting started":"The best way to start with ROQ is follow our Getting Started guide"}},"/another":{"title":"Another Page","data":{"":"let a = 1;\n\nconsole.log(a);","component#Component":"","external-component#External Component":""}},"/feature-guides/access-management":{"title":"Access Management","data":{"":"","introduction#Introduction":"Access management in SaaS applications refers to controlling who can access the application and what actions they can\nperform. This is typically achieved through roles and permissions, which grant different access levels to other users.With ROQ's access management, you can:\ndefine roles and assign them to your users\nsetup permissions and enforce them on your application.","what-are-roles-and-permissions#What are roles and permissions?":"A role is represented by its name. For example, you may define a role called \"admin\" and another role called \"\nmember\". You can also be more specific and use whatever term makes sense in your business, like \"chef\", \"driver\", or\njust \"customer\".Conceptually a role is a set of permissions. Roles are assigned directly to users. In some scenarios, users have\nmultiple roles.You can easily read them in sentences like this:\nA user is an admin\nA user is a chef\nA user is a driver\n\nPermissions define access to a specific type of object. For instance, you specify that a user has “read” access to\nthe sales orders of a restaurant management software.","how-it-works#How it works":"Roles and permissions are defined in the console. Generally, permissions grant access to objects, e.g., \"a user is\nallowed to make an order\". You can specify the access level (read, create, update and delete) and set the scope. The\nscope determines if a user has access to either \"all\" records, only the own records, or to records related to users of a\nuser group. These permissions are automatically enforced on all UI Components and APIs of ROQ.\nYou can also define permissions that are applied to your project!\nSome steps of preparation are needed; please refer to the instructions here: TODO Access Management - Project\nIntegration. First, you must declare your custom domain objects with relations in the console and define your\npermissions based on these objects.Technically the access management works based on a query plan which ROQ computes based on the current user's\nroles&permissions and your objects&relations. The SDK is caching this information locally and only refreshes it\nperiodically. This way, your application is independent of the availability of the ROQ Platform. Furthermore, there is\nno need to send all your data. ROQ only needs to know the schema of your database; the actual queries will be performed\non your side.You can use two functions of the SDK in your project: hasAccess and buildQueryPlan","check-if-a-user-has-access-to-an-object#Check if a user has access to an object.":"The hasAccess method returns true if a user has access to something; otherwise false. You can use it for any object,\nwhether it's an entity from your database, a URL, or a user interface component. See hasAccess SDK for more details.","filter-down-data-of-a-query#Filter down data of a query":"When you retrieve data from your database, you'll often need to filter it by the user's role. For example, let’s say you\nhave a REST endpoint called /sales-orders which returns a list of orders. Depending on the user's role, the result will\nbe different: an \"admin\" will see all the orders, while a \"customer\" will see only their orders. This can result in\ncomplicated WHERE conditions, especially if you have more than these two simple roles.For this scenario, ROQ provides a query builder that automatically creates the required conditions. Using our ORM\nadapter, this can be easily integrated into your project. The generated queries can become quite complex if you have a\ndeep schema. You can read more details about this method here: buildQueryPlan SDK","managing-roles#Managing roles":"A role has a name and a reference. The name should describe the role in an understandable way, like \"admin\", \"chef\" or \"\ndriver\". We recommend using the terminology of your business to avoid confusion.Roles can be managed in ROQ's console.","defining-permissions#Defining permissions":"Permissions are defined for each role individually. How you configure permissions varies depending on whether they are\napplied on your project side or at ROQ, but you'll still use the same roles for both systems.","projects-permissions#Project's permissions":"To define permission for your own application, you need to select an object type (e.g., salesOrder). If you don't find\nthe required object in the dropdown, then it wasn't declared in the preparation. In this case, please refer to the\nintegration guide: Access Management - Project IntegrationFor each object, you can set the access level:\nLevel\tDescription\tRead\tThe user is allowed to retrieve objects\tCreate\tEnables the user to create new objects of the selected type\tUpdate\tEnables the user to update objects of the selected type\tDelete\tEnables the user to delete objects of the selected type\nIn addition you can define the scope:\nScope\tDescription\tAll\tThe user is allowed to access all records\tRestricted\tA given path restricts the access\nThe path defines the correct way from one database table to another. For example, the path always starts at the\ntable representing the user (often, this table is called user ). From here, you can select other tables that are\nrelated until you reach the table that holds objects of the selected type. For instance, a path to a sales order\nobject could look like this: user → salesOrder. A path from a user to an order item could look like\nthis: user -> salesOrder -> salesOrderItemYour custom database schema only defines these paths. Instead, ROQ uses them to build the query plan, which is then used\nto add WHERE conditions to your database queries.","roq-platform-permissions#ROQ Platform permissions":"Permissions that are applied on ROQ's side are defined similarly. The paths are already pre-defined, so you don't need\nto set them up, but the scope needs to be defined differently.Scopes:\nScope\tDescription\tAll\tThe user is allowed to access all records\tOwn\tThe access is restricted to records that are directly related to a user\tTenant\tTODO"}},"/feature-guides/files":{"title":"Files","data":{"":"","introduction#Introduction":"ROQ provides a complete solution for file management including these features:\nFile upload using the UI component\nFiles visiblity (public or private)\nFile associations (files can be related to any object)","ui-components#UI Components":"ROQ’s file management provides there UI components which can be integrated into your application:\nThe File Upload UI component represents an area on your application where users\ncan drag and drop files to be uploaded.","basic-concepts#Basic concepts":"","file-uploads#File uploads":"Files that are uploaded to ROQ Platform are stored on Scaleway Object Storage. The data center is located in Paris.\nFiles can be uploaded via File Upload UI component or programmatically using the\ncreateFileUpload() API. The upload is realized using signed URLs, which means the\nfiles are uploaded directly from the user's browser to the object storage without sending it through your backend.","upload-validations#Upload validations":"ROQ is using file categories to define rules for the upload in the console. For\ninstance, you can set a category called \"pictures\" which requires the mime type of the uploaded file to be an image\n(see image mime type). You can also restrict the maximum size of uploads.","file-visibility#File visibility":"A file can be either public or private. Public means that there is a permanent URL which can be used by anyone,\nwhile\nprivate files can only be accessed by user who are allowed to do so. The visibility of a file can be changed in the\nconsole or via makeFilePublic() / makeFilePrivate() APIs","access-management#Access management":"You can define permissions of files using ROQ's access management feature. Files\nare always owned by the user who uploaded it. You can restrict the access to this user or enable users of the same\ntenant to download the file.","file-associations#File associations":"When a file is stored on ROQ Platform, then it usually belongs to another object. For instance PDF files can be uploaded\nand related to a \"contract\":."}},"/feature-guides/chat":{"title":"Chat","data":{"":"ROQ’s chat system is a fully fledged messaging interface that enables your app’s users to chat in realtime, or send\nmessages, similar to popular messenger applications.The chat system uses a secure websocket socket connection to send and receive messages in realtime. It can be integrated\nto your application within a few minutes, and then customized to your requirements. It is highly flexible and using a\ncombination of the customizable UI widgets for chat, and the API, you could achieve a wide range of flexibility - from a\nprivate messenger like experience, to even a slack-like experience."}},"/feature-guides/user-groups":{"title":"User Groups","data":{"":"","introduction#Introduction":"We usually interpret a user group as exactly what the name says: “a group of users”. The most common use case is to\nuse\nuser groups to represent Multi-tenancy but there are also lots of other use cases. You\nmay want to group users by their home country or any other characteristic.User groups are often related to your custom domain objects like:\nall users that belong to a restaurant\nall users that belong to a team\nall users that belong to a company\n\nUser groups are used for multiple purposes:\nto notify a group of users\nto define access rights, eg:\nusers of the same restaurant can chat with each other\nthis file can be edited by all users of the same team\nusers of the company can invite each other","manage-user-groups#Manage user groups":"User groups can be managed via console or Create user group API. A user group has a name (e.g. “The Mavericks” or “The\nGourmet Kitchen”). In addition, you can define a project-specific reference that enables you to fetch user groups using\nyour own identifier. User groups are having a type. For instance “The Mavericks” could be of type “Team”, while “Foo\nGlobal” could be of type “Restaurant”.","add-and-remove-users#Add and remove users":"You can add and remove users from a user group in the console or use the Add users to a user group API. Group\nmemberships are also shown for each user in the console."}},"/ui-components/chat-message-bell":{"title":"Chat Message Bell","data":{"":"The <ChatMessageBell /> component is typically used in the head offer your application. It informs the user about\nunread messages in the chat.See this component on Storybook","integration#Integration":"To show the bell component, you can copy this snippet in your code:\n<ChatProvider>\n<ChatNotificationBell showZero />\n</ChatProvider>"}},"/ui-components/file-active-uploads":{"title":"File Active Uploads","data":{"":"","introduction#Introduction":"The <FileActiveUploads /> component shows a progress bar of all active files uploads. Users can abort and restart\nuploads. This component is typically shown on the bottom right corner of your application but you can place it wherever\nyou like.See this component on Storybook","integration#Integration":"To add the  <FileActiveUploads /> component to your application, you can use the following code:\n<FileActiveUploads\nfiles={[]}\nonCancel={function noRefCheck() {\n}}\nonRestart={function noRefCheck() {\n}}\n/>\n\nProp\tType\tDescription\tDefault\tfiles\tarray\tList of files that are currently uploaded. Each file is represented as an object, see below.\t[]\tfiles.abortController\tAbortController\tInstance of Abort controller object that allows you to abort one or more DOM requests as and when desired.\tundefined\tname\tString\tName of the file\t\tpercentage\tNumber\tFile percentage which was uploaded\t\tsize\tNumber\tSize of file in bytes\t\tstatus\tActiveUploadStatusEnum\tStatus of the file\tUPLOADING\ttemporaryId\tString\tUnique Identifier for the files list\t\tuploadUrl\tString\tUpload URL, to upload file\t\tonCancel\tfunction\tCallback function which is triggered when  User Clicks on Cancel (X) Icon, contains logic on how to cancel file upload\t\tonRestart\tfunction\tCallback function which is triggered when User Clicks on restart Icon, contains logic on how to restart file upload"}},"/getting-started":{"title":"Getting Started","data":{"":"Welcome to the \"Getting Started\" page of our technical documentation! Here, you will find all the necessary information\nto help you get up and running ROQ’s features. This page provides you with step-by-step instructions for installing and\nconfiguring ROQ.","1-install-roqs-library#(1) Install ROQ's library":"You can install ROQ’s SDK by running this NPM command:\nnpm i roq","2-set-credentials-on-server-side#(2) Set credentials on server-side":"Please create a free account in the console and get your environment credentials.\nTo install ROQ you need the apiKey, environmentId, jwtSecret and the URL of ROQ's API endpoint called ROQ\nPlatform.Now you can initialize the services using the credentials on the backend-side of your application:\nconst {Platform} = require('...');\n\nconst platform = new Platform({\nenvironmentId: 'CHANGE_ME',\napiKey: 'CHANGE_ME',\njwtSecret: 'CHANGE_ME',\nhost: 'CHANGE_ME'\n});","3-synchronize-user-data#(3) Synchronize user data":"Before using ROQ’s feature, you need to synchronize some of your user data. This data is needed for two purposes\nFor the creation of user-specific JWT tokens. These tokens are used for secure interaction between your application\nand ROQ.\nThe data is also used to send emails and notifications. For instance, you may want to address your users by their\nfirst name in a notification template: Hi {{recipient.firstName}}\n\nIt’s your decision which information you wish to synchronize to ROQ. It’s recommended to send the data to ROQ after you\nstore it in your database. Technically you can use the createUser() mutation like this:\nuserData: {\nTODO\n}\n\nconst {id: roqIdentifier} = platform.user.createUser(userData);\nYou need to save the returned ID in your database because the API needs it.ℹ️ See Create users API for more information.\n@TODO - Add link","4-pass-token-from-server-to-client-side#(4) Pass token from server to client-side":"The AuthorisationClientService is used to fetch user tokens from ROQ Platform. You can create a token of a user with the\ncreateUserToken method and the ID which you received from the createUser method previously:\nconst token = await TODO.createUserToken({\nroqIdentifier: userId\n});\nThe token needs to be passed over to your client-side. The specific implementation depends on your framework.","5-install-roqprovider-on-client-side#(5) Install <RoqProvider/> on client-side":"To use ROQ's UI Components, you need to wrap your React application into the RoqProvider component. This provider is\nused for configuration and provides the required context to the other components.First, you need to determine the right place to add the wrapper:\nPure React: There is always an entry component, depending on your architecture approach.\nNext.js: If using Next.js, then it's recommended to use the App component as described\nhere: https://nextjs.org/docs/advanced-features/custom-app\n\nThen you need to import the index.css, which holds the styling of ROQ’s UI components, and wrap your application into\nthe <RoqProvider />\nimport \"rocomp/dist/index.css\";\n\nconst getUserToken = () => query(api);\n\n// ....\n\n<RoqProvider\nconfig={{\nhost: 'https://...',\ngetToken: getUserToken,\nsocket: true\n}}>\n...\n</RoqProvider>\nThere are multiple props and configuration parameters that can be set on the RoqProvider component:\nProp\tType\tDescription\tconfig\tobject\tAn object that sets the global config with the parameters explained below.\tconfig:host\tstring\tDefines the URL of ROQ Platform. You can get this information from the console. Please note the hostname will be different for production and non-production environments.\tconfig:getToken\tfunction\tReference to a function that returns the user's token that enables the interaction with ROQ Platform. Alternatively, you can pass the token directly using the token parameter.\tconfig:socket?\tboolean\tA boolean value must be true if a socket connection is established. This is required for notifications and chats. (default: false)\tlocale?\tstring\tThe locale prop is used to translate the component. Setting the same locale used in the current user's session is recommended.\ttheme?\tstring\tCurrently selected theme. All components ship with a light and a dark theme (default: light)\tcustomTheme?\tstring\tYou can change the styling of the component by injection as a custom theme like this:\tconfig:translationsTTL?\tnumber\tFetched translations are saved in the browser's local storage. This parameter lets you define the TTL in ms (default: 90000 ~ 15 minutes).\tconfig:translationsCache?\tboolean\tBoolean value to disable the translation cache (default: true)\ttranslate?\tfunction\tCustom translation function. You can read more about customizing translations here: Custom translations\tonError?\tfunction\tThe callback function, which is called when an error happens\n🎉🎉🎉🎉🎉 That’s it! Now you are ready to select one of the UI components and to implement and business logic based on ROQ!"}},"/ui-components/chat":{"title":"Chat","data":{"":""}},"/ui-components/notification-modal":{"title":"Notification Modal","data":{"":"","overview#Overview":"The <NotificationModal /> component shows the user's notifications in real-time and also enables the user to\nconfigure the preferences. Please refer to the notifications feature guide for more\ninformation and instructions.\n\n\n\n\n\n\n\n\n\nSee this component in action on\nStorybook.","integration#Integration":"The notification modal component can be integrated with just one line of code. The component will open a socket\nconnection to ROQ Platform to receive notifications events in real time. The list of notifcations is fetched using the\nnotifications() API.\n\n\n<NotificationModal/>"}},"/feature-guides/notifications":{"title":"Notifications","data":{"":"","introduction#Introduction":"ROQ's notifications enable you to notify your users or user groups on various channels:\nIn-app notifications, loaded in real-time using a socket connection directly from your web app using\nthe Notification Modal UI component.\nnotifications via SMS or push messages to the mobile phones of your users\nchat systems like Slack and Discord\nand traditional e-mails.\n\nUsers can define their preferences for every type of notification. For instance, alerts can be retrieved via push\nmessage, while product updates are delivered via e-mail.","ui-components#UI components":"ROQ's notification feature ships with two main UI components that you can easily integrate into your application:\nThe Notification Modal component shows the user's notifications in\nreal-time and also enables the user to configure the preferences.\nThe Notification Bell component renders a bell symbol which informs the\nuser about unread notifications.","how-to-use-notifications#How to use notifications":"To notify users via ROQ's API, you need to perform these steps:\nConfigure channel providers\nCreate new notification template\nNotify users using the API","1-configure-channel-providers#(1) Configure channel providers":"ROQ is using multiple providers to notify users. You can active and configure one provider per channel in\nthe console.\nChannel\tProviders\tEmail\tEmail.js, SendGrid, Mailgun, Mailjet, Mandrill, Nodemailer, Postmark, Sendinblue, SES, NetCore\tSMS\tNexmo, Plivo, sms77, SNS, Telnyx, Twilio, Gupshup, Firetext\tPush\tcoming soon\tChat\tcoming soon","2-create-new-notification-template#(2) Create new notification template":"You can manage new notification templates in the console. Each template requires a unique\nkey which will be used as a reference to trigger notifications using the API.For each notification template you can configure and activate multiple channels. There are five channels to choose from:\nIn-app notifications, using the Notification Modal UI component.\nSMS\nPush messages\nChat systems like Slack and Discord\nand traditional e-mails.\n\nFor each activated channel, you can select and icon and enter localized content using dynamic variables like this:\nYou got {{points}} points!\nThese variables can be submitted using the data parameter of the notify() API.\nYou can also use these pre-defined variables to enrich your content:\nVariable\tDescription\t{{recipient.firstName}}\tThe first of the user who receives the notification\t{{recipient.lastName}}\tThe last of the user who receives the notification\t{{BASE_URL}}\tThe base URL of your application that you configured in the console.","3-notify-users-using-the-api#(3) Notify users using the API":"To notify your users you can use the notify() API. It's important to\nuse the same key which you set to the notification template."}},"/ui-components/file-dropzone":{"title":"File Dropzone","data":{"":"","introduction#Introduction":"The <FileUpload /> component represents an area on your application where users can drag and drop files to be\nuploaded. The dropzone typically appears as a highlighted area or box on the screen, and users can drag files from their\ncomputer and drop them into the designated area. Once the files are dropped, they will begin to upload to the website or\napplication. This can be a convenient and user-friendly way to upload files, especially if the user has multiple files\nto upload at once.\n\n\n\n\n\n\n\n\n\nSee this component in action on\nStorybook.","integration#Integration":"You can easily add the <FileUpload /> component to your application by using this code:\n<FileUpload\naccept={[\n'image/*',\n'application/pdf',\n'application/m*'\n]}\nfileAssociationOptions={[]}\nfileCategory=\"USER_FILES\"\nonUploadFail={function noRefCheck() {\n}}\nonUploadSuccess={function noRefCheck() {\n}}\n/>\n\nProp\tType\tDescription\tDefault\taccept\tstring[]\tList of mime-types that the drop zone should support\tAll\tfileCategory\tstring\tFile category key defined in the console\t\tonUploadFail\tfunction\tCallback, invoked when upload gets failed\t\tonUploadSuccess\tfunction\tCallback, invoked when upload gets successful"}},"/api-doc/files-change-visibility":{"title":"Files Change Visibility","data":{"":"A file can be either public or private. Public means that there is a permanent URL which can be used by anyone, while\nprivate files can only be accessed by user who are allowed to do so. The visibility of a file can be changed in the\nconsole or via API using the makeFilePublic() and makeFilePrivate() methods.","makefilepublic#makeFilePublic()":"To hide a file from public access, you can execute:\n\n\nmutation makeFilePublic($fileId: ID!) {\nmakeFilePublic(fileId: $fileId) {\nid\n}\n}","makefileprivate#makeFilePrivate()":"To enable public access to a file, run:\n\n\nmutation makeFilePrivate($fileId: ID!) {\nmakeFilePrivate(fileId: $fileId) {\nid\n}\n}"}},"/api-doc/notify-users-api":{"title":"notify()","data":{"":"You can send a notification of type \"WELCOME_NOTIFICATION\" to a single or multiple user using the notify() mutation. See\nfull specs in the API doc. This endpoint is available only from the server-side of your application.See the API doc of notify\nmutation {\nnotify(\nnotification: {\nkey: \"WELCOME_NOTIFICATION\"\nrecipients: {\nexcludedUserIds: [\"abc123\"]\nuserIds: [\"abc123\"]\nallUsers: false\nuserGroups: { userGroupIds: [\"abc123\"], operator: AND }\n}\n}\n) {\nusersNotified {\ncount\n}\n}\n}\n\nParameter\tType\tDescription\tkey\tstring\tKey of notification-type that you created in the Console, eg.\"WELCOME_NOTIFICATION\"\trecipients:userIds\tarray\tArray of user IDs that are notified.\trecipients:userGroups\tobject\tObject that contains a list of user-groups. You can also set a boolean value to decide who will be notified. See below.\trecipients:excludedUserIds\tarray\tList of user IDs (of ROQ Platform) who shouldn't be notified. A typical use case is when a user performs an action and all users of the same user-group should be notified, except of the acting user.\trecipients:allUsers\tbool\tIf set to true then all users will be notified.\tdata\tarray\tList of key/value pairs which you can use in the content section of the Notification template","operators#Operators":"AND - Notify all users that are related to all listed user-groups\nOR - Notify all users that are related to any of the user-group"}},"/api-doc/add-users-to-group-api":{"title":"A","data":{"":"To add a user to a user group, you can use the addUsersToUserGroup API . See full specs in the API docRead more about the concept of user groups here: User groups.See the API doc of addUsersToUserGroup\nmutation addUsersToUserGroup(\n$id: ID!,\n$userIds: [ID!]!\n) {\naddUsersToUserGroup(\nid: $id,\nuserIds: $userIds\n)\n}\n\nParameter\tType\tDescription\tid\tUUID\tID of the user group\tuserIds\tarray\tArray of user IDs"}},"/api-doc/fetch-notifications-api":{"title":"notifications()","data":{"":"The notification list UI component fetches notifications using the notifications() query. See full specs in the API doc.\nThis endpoint is available at the client- and server-side APIs.See the API doc of fetch notifications\nquery notifications(page: 0, seen: true) {\ntotalCount\ndata {\n{\n\"id\": \"xyz789\",\n\"createdAt\": \"2007-12-03\",\n\"templateIdentifier\": \"abc123\",\n\"content\": \"xyz789\",\n\"seen\": true,\n\"read\": false,\n\"email\": \"abc123\",\n\"providerId\": \"abc123\",\n\"title\": \"abc123\",\n\"icon\": \"abc123\",\n\"lastSeenDate\": \"xyz789\",\n\"errorId\": \"xyz789\",\n\"errorText\": \"abc123\",\n\"status\": \"sent\",\n\"channel\": \"email\"\n}\n}\n}"}},"/api-doc/create-users-api":{"title":"C","data":{"":"The createUser API is used to synchronize user data to ROQ. This data is needed for two purposesFor the creation of user-specific JWT tokens. These tokens are used for secure interaction between your application and\nROQ. The data is also used to send emails and notifications. For instance, you may want to address your users by\ntheir first name in a notification template: Hi {{recipient.firstName}}It’s your decision which information you wish to synchronize to ROQ. It’s recommended to send the data to ROQ after you\nstore it in your database.See the API doc of createUser\nuserData: {\nreference: \"123\",\nemail: \"john@doe.tech\",\nfirstName: \"John\",\nlastName: \"Doe\",\nisOptedIn: true,\nactive: true,\nlocale: \"en-US\"\n}\n\nconst { id: roqIdentifier } = platform.user.createUser(userData);\nYou need to save the returned ID in your database because the API needs it.\nParameter\tType\tDescription\treference\tstring\tHere you can set your identifier (e.g. the UUID of the user entity in your database). This way you can filter users by your own identifier.\temail\tstring\tEmail of the user\tfirstName\tstring\tFirst name of the user\tlastName\tstring\tLast name of the user\tisOptedIn\tboolean\tSet to true after the user confirm the email.\tactive\tboolean\tSet to true if the user is activate and able to login to your application.\tlocale\tstring\tThe locale represents the language and the country of the user, e.g. en-US means “english in US”. The locale is used for translations of all UI components as well as for sending notifications."}},"/api-doc/Files/files-change-visibility":{"title":"Files Change Visibility","data":{"":"A file can be either public or private. Public means that there is a permanent URL which can be used by anyone, while\nprivate files can only be accessed by user who are allowed to do so. The visibility of a file can be changed in the\nconsole or via API using the makeFilePublic() and makeFilePrivate() methods.","makefilepublic#makeFilePublic()":"To hide a file from public access, you can execute:\n\n\nmutation makeFilePublic($fileId: ID!) {\nmakeFilePublic(fileId: $fileId) {\nid\n}\n}","makefileprivate#makeFilePrivate()":"To enable public access to a file, run:\n\n\nmutation makeFilePrivate($fileId: ID!) {\nmakeFilePrivate(fileId: $fileId) {\nid\n}\n}"}},"/api-doc/Files/change-visibility":{"title":"Change Visibility","data":{"":"A file can be either public or private. Public means that there is a permanent URL which can be used by anyone, while\nprivate files can only be accessed by user who are allowed to do so. The visibility of a file can be changed in the\nconsole or via API using the makeFilePublic() and makeFilePrivate() methods.","makefilepublic#makeFilePublic()":"To hide a file from public access, you can execute:\n\n\nmutation makeFilePublic($fileId: ID!) {\nmakeFilePublic(fileId: $fileId) {\nid\n}\n}","makefileprivate#makeFilePrivate()":"To enable public access to a file, run:\n\n\nmutation makeFilePrivate($fileId: ID!) {\nmakeFilePrivate(fileId: $fileId) {\nid\n}\n}"}},"/api-doc/files/change-visibility":{"title":"Change Visibility","data":{"":"A file can be either public or private. Public means that there is a permanent URL which can be used by anyone, while\nprivate files can only be accessed by user who are allowed to do so. The visibility of a file can be changed in the\nconsole or via API using the makeFilePublic() and makeFilePrivate() methods.","makefilepublic#makeFilePublic()":"To hide a file from public access, you can execute:\n\n\nmutation makeFilePublic($fileId: ID!) {\nmakeFilePublic(fileId: $fileId) {\nid\n}\n}","makefileprivate#makeFilePrivate()":"To enable public access to a file, run:\n\n\nmutation makeFilePrivate($fileId: ID!) {\nmakeFilePrivate(fileId: $fileId) {\nid\n}\n}"}},"/api-doc/files/create-file-upload":{"title":"Create File Upload","data":{"":""}},"/api-doc/mails-api":{"title":"Mails API","data":{"":"","introduction#Introduction":"ROQ Platform provides a unified way to send emails utilizing multiple providers like Sendgrid, Mandrill, Mailgun, and\nothers. Please refer to the mails feature guide for more information and instructions.","sendmail#sendMail()":"This endpoint is only available from the server side of your application.\nThe sendMail() mutation can be used to send e-mails. The mutation returns the number of emails sent. You can find\nthe full API doc of this mutation here.\n\n\nmutation {\nsendMail(\nmail: {\nkey: \"abc123\"\nlocale: \"abc123\"\nemails: [\"xyz789\"]\ndata: [{ key: \"xyz789\", value: \"xyz789\" }]\n}\n) {\nmailsSent: {count}\n}\n}\n\n\n\n\nParameter\tType\tDescription\tkey\tstring\tKey of mail type that you created in the Console, eg.\"WELCOME_NOTIFICATION\"\tlocale\tstring\tLocale (language) of the mail, eg \"en-US\"\temails\tarray\tList of email addresses\tdata\tarray\tArray with key/value pairs. You can use this data in the template"}},"/api-doc/notifications-api":{"title":"Notifications API","data":{"":"","introduction#Introduction":"ROQ's notifications enable you to notify your users or user groups on various channels. Please refer to\nthe notifications feature guide for more information and instructions.","notify#notify()":"This endpoint is only available from the server side of your application.\nThe notify() mutation enables you to notify:\na single user or multiple users\nusers of one or multiple user groups\nall of your users.\n\nYou can find the full API doc of this mutation here.The API requiers a key parameter which you need to configure in the console, see\ninstructions here. The notified users are\ndefined in the recipients variable as shown below.\n\n\nmutation {\nnotify(\nnotification: {\nkey: \"aaa\"\nrecipients: {\nuserIds: [\"abc123\"]\nuserGroups: { operator: AND, userGroupIds: [\"xyz789\"] }\nexcludedUserIds: [\"abc123\"]\nallUsers: false\n}\ndata: [{ key: \"xyz789\", value: \"xyz789\" }]\n}\n) {\nusersNotified {\ncount\n}\n}\n}\n\n\n\n\nParameter\tType\tDescription\tkey\tstring\tKey of notification-type that you created in the Console, eg.\"WELCOME_NOTIFICATION\"\trecipients:userIds\tarray\tArray of user IDs that are notified.\trecipients:userGroups\tobject\tAn object that represents a list of user groups and an operator which can be set to \"AND\"(intersection of users) and \"OR\" (union of users).\trecipients:excludedUserIds\tarray\tList of user IDs (of ROQ Platform) who shouldn't be notified. A typical use case is when a user performs an action and all users of the same user-group should be notified, except of the acting user\trecipients:allUsers\tbool\tIf set to true then all users will be notified.\tdata\tarray\tList of key/value pairs which you can use in the content section of the Notification template","notifications#notifications()":"The Notification Modal UI component fetches notifications by using the\nnotifications() query. You can find the full API doc of this query here.\n\n\nquery notifications(page: 0, seen: true) {\ntotalCount\ndata {\n{\n\"id\": \"xyz789\",\n\"createdAt\": \"2007-12-03\",\n\"templateIdentifier\": \"abc123\",\n\"content\": \"xyz789\",\n\"seen\": true,\n\"read\": false,\n\"email\": \"abc123\",\n\"providerId\": \"abc123\",\n\"title\": \"abc123\",\n\"icon\": \"abc123\",\n\"lastSeenDate\": \"xyz789\",\n\"errorId\": \"xyz789\",\n\"errorText\": \"abc123\",\n\"status\": \"sent\",\n\"channel\": \"email\"\n}\n}\n}"}},"/api-doc/users-api":{"title":"Users API","data":{"":"","create-users#Create users":"The createUser API is used to synchronize user data to ROQ. This data is needed for two purposesFor the creation of user-specific JWT tokens. These tokens are used for secure interaction between your application and\nROQ. The data is also used to send emails and notifications. For instance, you may want to address your users by\ntheir first name in a notification template: Hi {{recipient.firstName}}It’s your decision which information you wish to synchronize to ROQ. It’s recommended to send the data to ROQ after you\nstore it in your database.See the API doc of createUser\nuserData: {\nreference: \"123\",\nemail: \"john@doe.tech\",\nfirstName: \"John\",\nlastName: \"Doe\",\nisOptedIn: true,\nactive: true,\nlocale: \"en-US\"\n}\n\nconst { id: roqIdentifier } = platform.user.createUser(userData);\nYou need to save the returned ID in your database because the API needs it.\nParameter\tType\tDescription\treference\tstring\tHere you can set your identifier (e.g. the UUID of the user entity in your database). This way you can filter users by your own identifier.\temail\tstring\tEmail of the user\tfirstName\tstring\tFirst name of the user\tlastName\tstring\tLast name of the user\tisOptedIn\tboolean\tSet to true after the user confirm the email.\tactive\tboolean\tSet to true if the user is activate and able to login to your application.\tlocale\tstring\tThe locale represents the language and the country of the user, e.g. en-US means “english in US”. The locale is used for translations of all UI components as well as for sending notifications.","create-user-groups#Create user groups":"Parameter\tType\tDescription\tname\tstring\tThe name of the user group. For instance “My Team”\treference\tstring\t\ttype\tstring","add-users-to-user-groups#Add users to user groups":"To add a user to a user group, you can use the addUsersToUserGroup API . See full specs in the API docRead more about the concept of user groups here: User groups.See the API doc of addUsersToUserGroup\nmutation addUsersToUserGroup(\n$id: ID!,\n$userIds: [ID!]!\n) {\naddUsersToUserGroup(\nid: $id,\nuserIds: $userIds\n)\n}\n\nParameter\tType\tDescription\tid\tUUID\tID of the user group\tuserIds\tarray\tArray of user IDs"}},"/api-doc/overview":{"title":"Overview","data":{"":"","introduction#Introduction":"All of ROQ's functionality is provided by ROQ Platform, a headless API-driven system that ROQ operates. ROQ Platform\nuses GraphQL as the primary approach for representing APIs. GraphQL is simple to use and easy to learn. We recommend\nstarting your journey at the official GraphQL documentation: Introduction to GraphQL.You can find a generated GraphQL reference here: ROQ Platform APIAPIs of ROQ Platform:","url-and-credentials#URL and Credentials":"ROQ operates multiple instances of ROQ Platform. You can find the URL of your instance when you log in to the\nconsole. There you also find the other credentials like apiKey and environmentId.","client--and-server-side-apis#Client- and server-side APIs":"Some GraphQL mutations aren't available on the client side of your application and can only be used from the\nserver side. That's because users could manipulate parameters and perform undesirable behavior. For this reason ROQ\nPlatform exposes two endpoints:\n{URL}/v01/graphql - API for the client-side of your application. Interactions require a user token.\n{URL}/v01/server/graphql - API for the server-side of your application. Interactions require a user token and\nthe apiKey.","authentication#Authentication":"To interact with the APIs of ROQ Platform, youdocs\nauthentication\nclient side\nserver side"}},"/api-doc/files-api":{"title":"Files API","data":{"":"","introduction#Introduction":"ROQ provides a complete solution for management of public and private files. Please read the\nfiles feature guide for all information.","files#files()":"You can get a list of files using the files() query.Access management: The query returns all files that are accessible for the\ncurrent user.Associations: You can use the filters to find files which are associated with other objects;\nsee createFileAssociation(). The typical flow looks loke this: First, you fetch the ID of an\nobject from your database and then query the related\nfiles. For instance, the query shown below requests all files that are associated with a specific \"contract\".Visibility: For files marked as “public”, the returned URL is static. If the file is marked as “private”, then\nthe\nURL is\nreferred to as a signed URL which is created for only one purpose. A signed URL works only for a short amount of time\nand is not intended to be published.\n\n\nquery {\nfiles(filter: {\nentityName: {\nequalTo: \"contract\"\n},\nentityIdentifiers: {\nequalTo:\"123\"\n}}) {\ndata {\nid\nname\ncontentType\nurl\nisPublic\n}\n}\n}\n\n\n\nParameter\tType\tDescription\tentityName\tobject\tName of the object. This could be the name of the table in your database, e.g. \"contract\"\tentityIdentifiers\tobject\tReferences (or IDs) of the related objects from your database","file#file()":"To download a single file, you can use the file() query.\n\n\nquery {\nfile(fileId: \"123\") {\nid\nname\nurl\nisPublic\n}\n}","createfileupload#createFileUpload()":"To upload file via API you need to proceed the following steps. However, it's recommended to use ROQ's File Upload UI\ncomponent instead of building it yourself.\nGenerate a signed URL using the createFileUpload() API\nUpload file via the signed URL\nSet status of the file using the updateFileStatus() API\n\nThe createFileUpload API returns a \"signed URL\" which is then used to upload the file directly from the user's browser\nto the object storage.\n\n\nmutation {\ncreateFileUpload(\nfile: {\nname: \"abc123\"\ncontentType: \"image/png\"\nfileCategory: \"xyz789\"\n}\n) {\nid\nuploadUrl\n}\n}\n\n\n\n\nParameter\tType\tDescription\tname\tstring\tName of the uploaded file\tcontentType\tstring\tMime type of the file, see here for a list of all types\tfileCategory\tstring\tKey of the category of the file\nWith the returned URL you can upload the file, for instance using curl:\ncurl 'https://s3.fr-par.scw.cloud/<bucket-name>' \\\n-H 'authority: s3.fr-par.scw.cloud' \\\n-H 'accept: application/json, text/plain, */*' \\\n-H 'accept-language: en-US,en;q=0.9' \\\n-H 'content-type: image/png' \\\n-H 'sec-fetch-mode: cors' \\\n-H 'sec-fetch-site: cross-site' \\\n--data-raw $'---REMOVED---' \\\n--compressed\nWhen the upload is finished, you need to set the status of the upload. This is needed because the file is uploaded\ndirectly to the object storage and therefore bypasses ROQ Platform.\n\n\nmutation{\nupdateFileStatus(\nfileId: \"123\",\nstatus: READY\n){\nid\n}\n}","createfileassociation#createFileAssociation()":"This endpoint is only available from the server side of your application.\nFiles usually belong to some other object. For instance, you may have PDFs which represent \"contracts\". Or you may\nhave images which are \"avatars\" and so on. To simplify this, ROQ enables you to relate files with objects which are\nsaved on your database. The advantage is that you don't need to add these relations to your own database.\n\n\nmutation {\ncreateFileAssociation(\ncreateFileAssociationDto: {\nentityReference: 4\nentityName: \"xyz789\"\nfileId: \"4\"\n}\n) {\nid\n}\n}\n\n\n\nParameter\tType\tDescription\tfileId\tstring\tUUID of the file\tentityReference\tstring\tReference (or ID) of the related entity in your database\tentityName\tstring\tName of the object. This could be the name of the table in your database, e.g. \"contract\"","makefilepublic#makeFilePublic()":"This endpoint is only available from the server side of your application.\nTo enable public access to a file, run:\n\n\nmutation makeFilePublic($fileId: ID!) {\nmakeFilePublic(fileId: $fileId) {\nid\n}\n}","makefileprivate#makeFilePrivate()":"This endpoint is only available from the server side of your application.\nTo hide a file from public access, you can execute:\n\n\nmutation makeFilePrivate($fileId: ID!) {\nmakeFilePrivate(fileId: $fileId) {\nid\n}\n}"}},"/api-doc/overview-api":{"title":"Overview","data":{"":"","introduction#Introduction":"All of ROQ's functionality is provided by ROQ Platform, a headless API-driven system that ROQ operates. ROQ Platform\nuses GraphQL as the primary approach for representing APIs. GraphQL is simple to use and easy to learn. We recommend\nstarting your journey at the official GraphQL documentation: Introduction to GraphQL.\nThe following picture shows a bird's eye view of the API.","queries-and-mutations#Queries and mutations":"You can find a generated GraphQL reference with all queries, mutations and types\nhere: ROQ Platform API. This\ndocumentation focuses on the most relevant functionalities:\nUploading and fetching files\nSending emails\nSending and receiving notifications\nManaging users and groups","url-and-credentials-of-roq-platform#URL and credentials of ROQ Platform":"ROQ operates multiple instances of ROQ Platform. You can find the URL of your instance when you log in to the\nconsole. There you also find the other credentials like apiKey and environmentId\nwhich you need to pass to the ROQProvider wrapper in your\nclient-side application.","client--and-server-side-apis#Client- and server-side APIs":"Some GraphQL mutations aren't available on the client side of your application and can only be used from the\nserver side. That's because users could manipulate parameters and perform undesirable behavior. For this reason ROQ\nPlatform exposes two endpoints:\n{URL}/v01/graphql - API for the client-side of your application. Interactions require a user token.\n{URL}/v01/server/graphql - API for the server-side of your application. Interactions require a user token and\nthe apiKey.","user-token#User token":"To interact with the APIs of ROQ Platform, you need to create a token for the current user using the createUserToken\nmutation."}},"/feature-guides/mails":{"title":"Mails","data":{"":"","introduction#Introduction":"ROQ provides a unified way to send emails utilizing multiple providers like Sendgrid, Mandrill, Mailgun, and\nothers. The email functionality is used by other features of ROQ, for instance confirming new user accounts.","how-to-send-emails#How to send emails":"To send emails via ROQ's API, you need to perform these steps:","1-configure-email-provider#1. Configure email provider":"Make sure that an email provider is connected and activated. You find a list of all integrations in the console.","2-create-email-template#2. Create email template":"Create a new email template and define a unique key. Then you can enter the content of the emails for each activated locale. You can use placeholders for\nany content you submit in the data parameter of the sendMail API.\nHi {{firstName}}!","3-send-emails-via-api#3. Send emails via API":"Emails are sent using the sendMail API. You need to use the same key which you set to\nthe email type."}},"/ui-components/notification-bell":{"title":"Notification Bell","data":{"":"","introduction#Introduction":"The <NotificationBell /> component renders a bell symbol which informs the user about unread notifications. It opens\nthe Notification Modal UI Component on click. Please refer to\nthe notifications feature guide for more information and instructions.\n\n\n\n\n\n\n\n\n\nSee this component in action on\nStorybook.","integration#Integration":"The bell symbol can be integrated by adding this component to your application:\n\n\n<NotificationBell/>"}},"/ui-components/file-upload":{"title":"File Upload","data":{"":"","introduction#Introduction":"The <FileUpload/> component represents an area on your application where users can drag and drop files to be\nuploaded. Please refer to\nthe files feature guide for more information and instructions.\n\n\n\n\n\n\n\n\n\nSee this component in action on\nStorybook.","integration#Integration":"You can easily add the <FileUpload/> component to your application by using this code:\n\n\n<FileUpload\naccept={[\n'image/*',\n'application/pdf',\n'application/m*'\n]}\nfileAssociationOptions={[]}\nfileCategory=\"USER_FILES\"\nonUploadFail={function noRefCheck() {\n}}\nonUploadSuccess={function noRefCheck() {\n}}\n/>\n\n\n\nProp\tType\tDescription\tDefault\taccept\tstring[]\tList of mime-types that the drop zone should support\tAll\tfileCategory\tstring\tFile category key defined in the console\t\tonUploadFail\tfunction\tCallback, invoked when upload gets failed\t\tonUploadSuccess\tfunction\tCallback, invoked when upload gets successful"}},"/feature-guides/multi-tenancy":{"title":"Multi Tenancy","data":{"":"In B2B SaaS applications, all users are usually grouped into tenants. Each of your business customers is represented as\na tenant. The related users and all the data are fully isolated.You may use another term, like organization, workspace, or team. For instance, if you are using Slack, then you know\nthat your team members are grouped into a so-called workspace. A tenant is usually created when the first user signs up,\nsee User registration. The first user then invites other users to the tenant; see User invitationIn ROQ, tenants are represented as User groups."}}}