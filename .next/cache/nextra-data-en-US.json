{"/":{"title":"Introduction","data":{"":"","what-is-roq-about#What is ROQ about?":"ROQ is based on the observation that most modern SaaS applications have the same main features. Although these\ncommodities alone won't make you unique, users still expect them, so you should offer them early. The challenge is that\nthese commodities are hard to implement and could easily waste your time and engineering capacity.ROQ solves this challenge by offering ready-to-use UI components and APIs for all essential features you need to build\nyour SaaS application: authentication, authorization, user management, a real-time chat,\nnotifications, file management, and many more.","how-does-roq-work#How does ROQ work?":"ROQ consists of two main parts: Functional UI Components and a Headless ROQ Platform","functional-ui-components#Functional UI Components":"ROQ provides a set of fully-functional and highly customizable UI components that you can easily integrate into your\napplication.","headless-roq-platform#Headless ROQ Platform":"ROQ Platform represents the backend for the UI components. In addition, ROQ Platform provides\nGraphQL APIs that you can leverage to build your custom logic.","getting-started#Getting started":"The best way to start with ROQ is follow our Getting Started guide"}},"/another":{"title":"Another Page","data":{"":"let a = 1;\n\nconsole.log(a);","component#Component":"","external-component#External Component":""}},"/feature-guides/access-management":{"title":"Access Management","data":{"":"","introduction#Introduction":"Access management in SaaS applications refers to controlling who can access the application and what actions they can\nperform. This is typically achieved through roles and permissions, which grant different access levels to other users.With ROQ's access management, you can:\ndefine roles and assign them to your users\nsetup permissions and enforce them on your application.","what-are-roles-and-permissions#What are roles and permissions?":"A role is represented by its name. For example, you may define a role called \"admin\" and another role called \"\nmember\". You can also be more specific and use whatever term makes sense in your business, like \"chef\", \"driver\", or\njust \"customer\".Conceptually a role is a set of permissions. Roles are assigned directly to users. In some scenarios, users have\nmultiple roles.You can easily read them in sentences like this:\nA user is an admin\nA user is a chef\nA user is a driver\n\nPermissions define access to a specific type of object. For instance, you specify that a user has “read” access to\nthe sales orders of a restaurant management software.","how-it-works#How it works":"Roles and permissions are defined in the console. Generally, permissions grant access to objects, e.g., \"a user is\nallowed to make an order\". You can specify the access level (read, create, update and delete) and set the scope. The\nscope determines if a user has access to either \"all\" records, only the own records, or to records related to users of a\nuser group. These permissions are automatically enforced on all UI Components and APIs of ROQ.\nYou can also define permissions that are applied to your project!\nSome steps of preparation are needed; please refer to the instructions here: TODO Access Management - Project\nIntegration. First, you must declare your custom domain objects with relations in the console and define your\npermissions based on these objects.Technically the access management works based on a query plan which ROQ computes based on the current user's\nroles&permissions and your objects&relations. The SDK is caching this information locally and only refreshes it\nperiodically. This way, your application is independent of the availability of the ROQ Platform. Furthermore, there is\nno need to send all your data. ROQ only needs to know the schema of your database; the actual queries will be performed\non your side.You can use two functions of the SDK in your project: hasAccess and buildQueryPlan","check-if-a-user-has-access-to-an-object#Check if a user has access to an object.":"The hasAccess method returns true if a user has access to something; otherwise false. You can use it for any object,\nwhether it's an entity from your database, a URL, or a user interface component. See hasAccess SDK for more details.","filter-down-data-of-a-query#Filter down data of a query":"When you retrieve data from your database, you'll often need to filter it by the user's role. For example, let’s say you\nhave a REST endpoint called /sales-orders which returns a list of orders. Depending on the user's role, the result will\nbe different: an \"admin\" will see all the orders, while a \"customer\" will see only their orders. This can result in\ncomplicated WHERE conditions, especially if you have more than these two simple roles.For this scenario, ROQ provides a query builder that automatically creates the required conditions. Using our ORM\nadapter, this can be easily integrated into your project. The generated queries can become quite complex if you have a\ndeep schema. You can read more details about this method here: buildQueryPlan SDK","managing-roles#Managing roles":"A role has a name and a reference. The name should describe the role in an understandable way, like \"admin\", \"chef\" or \"\ndriver\". We recommend using the terminology of your business to avoid confusion.Roles can be managed in ROQ's console.","defining-permissions#Defining permissions":"Permissions are defined for each role individually. How you configure permissions varies depending on whether they are\napplied on your project side or at ROQ, but you'll still use the same roles for both systems.","projects-permissions#Project's permissions":"To define permission for your own application, you need to select an object type (e.g., salesOrder). If you don't find\nthe required object in the dropdown, then it wasn't declared in the preparation. In this case, please refer to the\nintegration guide: Access Management - Project IntegrationFor each object, you can set the access level:\nLevel\tDescription\tRead\tThe user is allowed to retrieve objects\tCreate\tEnables the user to create new objects of the selected type\tUpdate\tEnables the user to update objects of the selected type\tDelete\tEnables the user to delete objects of the selected type\nIn addition you can define the scope:\nScope\tDescription\tAll\tThe user is allowed to access all records\tRestricted\tA given path restricts the access\nThe path defines the correct way from one database table to another. For example, the path always starts at the\ntable representing the user (often, this table is called user ). From here, you can select other tables that are\nrelated until you reach the table that holds objects of the selected type. For instance, a path to a sales order\nobject could look like this: user → salesOrder. A path from a user to an order item could look like\nthis: user -> salesOrder -> salesOrderItemYour custom database schema only defines these paths. Instead, ROQ uses them to build the query plan, which is then used\nto add WHERE conditions to your database queries.","roq-platform-permissions#ROQ Platform permissions":"Permissions that are applied on ROQ's side are defined similarly. The paths are already pre-defined, so you don't need\nto set them up, but the scope needs to be defined differently.Scopes:\nScope\tDescription\tAll\tThe user is allowed to access all records\tOwn\tThe access is restricted to records that are directly related to a user\tTenant\tTODO"}},"/feature-guides/files":{"title":"Files","data":{"":"ROQ provides a complete solution for file management including these features:\nFile upload using the UI component\nBulk file upload\nPrivate files\nPublic files\nFile associations","ui-components#UI Components":"ROQ’s file management provides there UI components which can be integrated into your application:\nThe File DropZone UI component represents an area on your application where users\ncan drag and drop files to be uploaded.","basic-concepts#Basic concepts":"","file-uploads#File uploads":"Files can be uploaded via File DropZone UI component or progammatically using the\ncreateFileUpload API.\nFiles that are uploaded to ROQ Platform are stored on Scaleway Object Storage. The data center is located in Paris.","file-status#File status":"","file-categories#File categories":"","file-visibility#File visibility":"A file can be either public or private. Public means that there is a permanent URL which can be used by anyone, while\nprivate files can only be accessed by user who are allowed to do so. The visibility of a file can be changed in the\nconsole or via API (docs).","file-ownership-and-access-management#File ownership and access management":"","file-associations#File associations":"When a file is stored on ROQ Platform, then it always belongs to another entity. For instance PDF files can be uploaded\nand related to a contract:\nConcept\tDescription\tFile visibility\t\tFile categories\tOften it makes sense to group files into project-specific categories, like “USER_FILES” or “CONTRACT_FILES”\tContent types\tThe list of all available types is available here: :question:\tFile status\tThe status of a file which can be one of: UPLOAD_PENDING, READY, CANCELLED or ERROR\tFile association"}},"/feature-guides/chat":{"title":"Chat","data":{"":"ROQ’s chat system is a fully fledged messaging interface that enables your app’s users to chat in realtime, or send\nmessages, similar to popular messenger applications.The chat system uses a secure websocket socket connection to send and receive messages in realtime. It can be integrated\nto your application within a few minutes, and then customized to your requirements. It is highly flexible and using a\ncombination of the customizable UI widgets for chat, and the API, you could achieve a wide range of flexibility - from a\nprivate messenger like experience, to even a slack-like experience."}},"/feature-guides/user-groups":{"title":"User Groups","data":{"":"","introduction#Introduction":"We usually interpret a user group as exactly what the name says: “a group of users”. The most common use case is to\nuse\nuser groups to represent Multi-tenancy but there are also lots of other use cases. You\nmay want to group users by their home country or any other characteristic.User groups are often related to your custom domain objects like:\nall users that belong to a restaurant\nall users that belong to a team\nall users that belong to a company\n\nUser groups are used for multiple purposes:\nto notify a group of users\nto define access rights, eg:\nusers of the same restaurant can chat with each other\nthis file can be edited by all users of the same team\nusers of the company can invite each other","manage-user-groups#Manage user groups":"User groups can be managed via console or Create user group API. A user group has a name (e.g. “The Mavericks” or “The\nGourmet Kitchen”). In addition, you can define a project-specific reference that enables you to fetch user groups using\nyour own identifier. User groups are having a type. For instance “The Mavericks” could be of type “Team”, while “Foo\nGlobal” could be of type “Restaurant”.","add-and-remove-users#Add and remove users":"You can add and remove users from a user group in the console or use the Add users to a user group API. Group\nmemberships are also shown for each user in the console."}},"/ui-components/chat-message-bell":{"title":"Chat Message Bell","data":{"":"The <ChatMessageBell /> component is typically used in the head offer your application. It informs the user about\nunread messages in the chat.See this component on Storybook","integration#Integration":"To show the bell component, you can copy this snippet in your code:\n<ChatProvider>\n<ChatNotificationBell showZero />\n</ChatProvider>"}},"/ui-components/file-active-uploads":{"title":"File Active Uploads","data":{"":"","overview#Overview":"The <FileActiveUploads /> component shows a progress bar of all active files uploads. Users can abort and restart\nuploads. This component is typically shown on the bottom right corner of your application but you can place it wherever\nyou like.See this component on Storybook","integration#Integration":"To add the  <FileActiveUploads /> component to your application, you can use the following code:\n<FileActiveUploads\nfiles={[]}\nonCancel={function noRefCheck() {\n}}\nonRestart={function noRefCheck() {\n}}\n/>\n\nProp\tType\tDescription\tDefault\tfiles\tarray\tList of files that are currently uploaded. Each file is represented as an object, see below.\t[]\tfiles.abortController\tAbortController\tInstance of Abort controller object that allows you to abort one or more DOM requests as and when desired.\tundefined\tname\tString\tName of the file\t\tpercentage\tNumber\tFile percentage which was uploaded\t\tsize\tNumber\tSize of file in bytes\t\tstatus\tActiveUploadStatusEnum\tStatus of the file\tUPLOADING\ttemporaryId\tString\tUnique Identifier for the files list\t\tuploadUrl\tString\tUpload URL, to upload file\t\tonCancel\tfunction\tCallback function which is triggered when  User Clicks on Cancel (X) Icon, contains logic on how to cancel file upload\t\tonRestart\tfunction\tCallback function which is triggered when User Clicks on restart Icon, contains logic on how to restart file upload"}},"/getting-started":{"title":"Getting Started","data":{"":"Welcome to the \"Getting Started\" page of our technical documentation! Here, you will find all the necessary information\nto help you get up and running ROQ’s features. This page provides you with step-by-step instructions for installing and\nconfiguring ROQ.","1-install-roqs-library#(1) Install ROQ's library":"You can install ROQ’s SDK by running this NPM command:\nnpm i roq","2-set-credentials-on-server-side#(2) Set credentials on server-side":"Please create a free account in the console and get your environment credentials.\nTo install ROQ you need the apiKey, environmentId, jwtSecret and the URL of ROQ's API endpoint called ROQ\nPlatform.Now you can initialize the services using the credentials on the backend-side of your application:\nconst {Platform} = require('...');\n\nconst platform = new Platform({\nenvironmentId: 'CHANGE_ME',\napiKey: 'CHANGE_ME',\njwtSecret: 'CHANGE_ME',\nhost: 'CHANGE_ME'\n});","3-synchronize-user-data#(3) Synchronize user data":"Before using ROQ’s feature, you need to synchronize some of your user data. This data is needed for two purposes\nFor the creation of user-specific JWT tokens. These tokens are used for secure interaction between your application\nand ROQ.\nThe data is also used to send emails and notifications. For instance, you may want to address your users by their\nfirst name in a notification template: Hi {{recipient.firstName}}\n\nIt’s your decision which information you wish to synchronize to ROQ. It’s recommended to send the data to ROQ after you\nstore it in your database. Technically you can use the createUser() mutation like this:\nuserData: {\nTODO\n}\n\nconst {id: roqIdentifier} = platform.user.createUser(userData);\nYou need to save the returned ID in your database because the API needs it.ℹ️ See Create users API for more information.\n@TODO - Add linkThe token needs to be passed over to your client-side. The specific implementation depends on your framework.","5-install-roqprovider-on-client-side#(5) Install <RoqProvider/> on client-side":"To use ROQ's UI Components, you need to wrap your React application into the RoqProvider component. This provider is\nused for configuration and provides the required context to the other components.First, you need to determine the right place to add the wrapper:\nPure React: There is always an entry component, depending on your architecture approach.\nNext.js: If using Next.js, then it's recommended to use the App component as described\nhere: https://nextjs.org/docs/advanced-features/custom-app\n\nThen you need to import the index.css, which holds the styling of ROQ’s UI components, and wrap your application into\nthe <RoqProvider />\nimport \"rocomp/dist/index.css\";\n\nconst getUserToken = () => query(api);\n\n// ....\n\n<RoqProvider\nconfig={{\nhost: 'https://...',\ngetToken: getUserToken,\nsocket: true\n}}>\n...\n</RoqProvider>\nThere are multiple props and configuration parameters that can be set on the RoqProvider component:\nProp\tType\tDescription\tconfig\tobject\tAn object that sets the global config with the parameters explained below.\tconfig:host\tstring\tDefines the URL of ROQ Platform. You can get this information from the console. Please note the hostname will be different for production and non-production environments.\tconfig:getToken\tfunction\tReference to a function that returns the user's token that enables the interaction with ROQ Platform. Alternatively, you can pass the token directly using the token parameter.\tconfig:socket?\tboolean\tA boolean value must be true if a socket connection is established. This is required for notifications and chats. (default: false)\tlocale?\tstring\tThe locale prop is used to translate the component. Setting the same locale used in the current user's session is recommended.\ttheme?\tstring\tCurrently selected theme. All components ship with a light and a dark theme (default: light)\tcustomTheme?\tstring\tYou can change the styling of the component by injection as a custom theme like this:\tconfig:translationsTTL?\tnumber\tFetched translations are saved in the browser's local storage. This parameter lets you define the TTL in ms (default: 90000 ~ 15 minutes).\tconfig:translationsCache?\tboolean\tBoolean value to disable the translation cache (default: true)\ttranslate?\tfunction\tCustom translation function. You can read more about customizing translations here: Custom translations\tonError?\tfunction\tThe callback function, which is called when an error happens\n🎉🎉🎉🎉🎉 That’s it! Now you are ready to select one of the UI components and to implement and business logic based on ROQ!"}},"/ui-components/chat":{"title":"Chat","data":{"":""}},"/ui-components/notification-modal":{"title":"Notification Modal","data":{"":"","overview#Overview":"The <NotificationModal /> component renders the notification center, including the user preferences.See this component on Storybook","integration#Integration":"You can integrate the component like this:\n<NotificationModal/>\nTechnically the component will open a socket connection to ROQ Platform, which informs about new notifications in real\ntime, which will then be fetched using the Fetch notifications API.In most cases, no configuration is needed but you can fine-tune the behavior with these props:\nProp\tType\tDescription\tDefault\tpollInterval\tnumber\tInterval to reset all fetched notifications (in ms)\t900000 (15 min)\tbodyHeightScroll\tnumber\tHeight at which scrolling starts\tnull (endless)\nBesides these props, you can inject any React component for styling purposes; see the styling guideIf you want to react to internal events, you can use one of these\ncallbacks: onChangeType,  onFetchNotificationsSuccess  and  onReceiveUnseenCountChanged."}},"/feature-guides/notifications":{"title":"Notifications","data":{"":"","overview#Overview":"ROQ's notifications enable you to notify your users or user groups on various channels:\nIn-app notifications, loaded in real-time using a socket connection directly from your web app using\nthe <NotificationModal /> and <NotificationBell /> UI components.\nnotifications via SMS or push messages to the mobile phones of your users\nchat systems like Slack and Discord\nand traditional e-mails.\n\nNotifications can be triggered programmatically using the Notify users API.","manage-templates#Manage templates":"","see-all-templates#See all templates":"To see all templates open the \"Notification\" section of the console.","create-new-template#Create new template":"To set up a new notification template, click the \"Create Template\" button. Then you enter a KEY which will be used as a\nreference to trigger notifications using the notify() API. For more details about the API, please check: Notify users\nAPI.","add-channels-to-a-template#Add channels to a template":"You can configure the channels of the notification template. ROQ's notification system provides these channels:\nIn-app notifications, using the <NotificationModal /> and <NotificationBell /> UI components\nSMS\nPush messages\nChat systems like Slack and Discord\nand traditional e-mails.\n\nEach channel can be configured and activated individually.","adding-localized-notification-content#Adding localized notification content":"You must enter the notification's content in the default locale of your environment. However, providing localized\ncontent for each locale is recommended if you have an international website using multiple languages.Please select a locale and enter the title accordingly. You can also choose an icon that will show in the Notification\nlist component. You can enter plain text but also use variables like this:\nYou got {{points}} points!\nThe points variable can be passed as a parameter of the Notify users API like this:\nmutation {\nnotify(\n...\ndata: [\n{\nkey: \"points\",\nvalue: \"100\"\n}\n]\n}\n) { }\n}\n}\nAlternatively, you can also use these default variables:\nVariable\tDescription\t{{recipient.firstName}}\tThe first of the user who receives the notification\t{{recipient.lastName}}\tThe last of the user who receives the notification\t{{BASE_URL}}\tThe base URL of your application that you configured in the console.","notify-users#Notify users":"By using ROQ’s API or SDK, you can notify the following:\na single user\nusers of one or many user groups\nall of your users\n\n→ See Notify users API for more information.","managing-integrations#Managing integrations":"ROQ integrates with various distribution providers, e.g., Twilio, Sendgrid, and AWS SES. All you need to do is enter your API keys in the console’s integration section for each channel you want to use.","user-preferences#User preferences":"Users can define their preferences for every type of notification. For instance, alerts can be retrieved via push message, while product updates are delivered via e-mail.","notification-logs#Notification logs":"All sent notifications are logged and can be viewed in the console."}},"/ui-components/file-dropzone":{"title":"File Dropzone","data":{"":"","introduction#Introduction":"The <FileDropZone /> component represents an area on your application where users can drag and drop files to be\nuploaded. The dropzone typically appears as a highlighted area or box on the screen, and users can drag files from their\ncomputer and drop them into the designated area. Once the files are dropped, they will begin to upload to the website or\napplication. This can be a convenient and user-friendly way to upload files, especially if the user has multiple files\nto upload at once.See this component on Storybook","integration#Integration":"You can easily add the <FileDropZone /> component to your application by using this code:\n<FileDropZone\naccept={[\n'image/*',\n'application/pdf',\n'application/m*'\n]}\nfileAssociationOptions={[]}\nfileCategory=\"USER_FILES\"\nonUploadFail={function noRefCheck() {\n}}\nonUploadSuccess={function noRefCheck() {\n}}\n/>\n\nProp\tType\tDescription\tDefault\taccept\tstring[]\tList of mime-types that the drop zone should support\tAll\tfileCategory\tstring\tFile category key defined in the console\t\tonUploadFail\tfunction\tCallback, invoked when upload gets failed\t\tonUploadSuccess\tfunction\tCallback, invoked when upload gets successful"}},"/api-doc/files-change-visibility":{"title":"Files Change Visibility","data":{"":"A file can be either public or private. Public means that there is a permanent URL which can be used by anyone, while\nprivate files can only be accessed by user who are allowed to do so. The visibility of a file can be changed in the\nconsole or via API using the makeFilePublic() and makeFilePrivate() methods.","makefilepublic#makeFilePublic()":"To hide a file from public access, you can execute:\n\n\nmutation makeFilePublic($fileId: ID!) {\nmakeFilePublic(fileId: $fileId) {\nid\n}\n}","makefileprivate#makeFilePrivate()":"To enable public access to a file, run:\n\n\nmutation makeFilePrivate($fileId: ID!) {\nmakeFilePrivate(fileId: $fileId) {\nid\n}\n}"}},"/api-doc/notify-users-api":{"title":"notify()","data":{"":"You can send a notification of type \"WELCOME_NOTIFICATION\" to a single or multiple user using the notify() mutation. See\nfull specs in the API doc. This endpoint is available only from the server-side of your application.See the API doc of notify\nmutation {\nnotify(\nnotification: {\nkey: \"WELCOME_NOTIFICATION\"\nrecipients: {\nexcludedUserIds: [\"abc123\"]\nuserIds: [\"abc123\"]\nallUsers: false\nuserGroups: { userGroupIds: [\"abc123\"], operator: AND }\n}\n}\n) {\nusersNotified {\ncount\n}\n}\n}\n\nParameter\tType\tDescription\tkey\tstring\tKey of notification-type that you created in the Console, eg.\"WELCOME_NOTIFICATION\"\trecipients:userIds\tarray\tArray of user IDs that are notified.\trecipients:userGroups\tobject\tObject that contains a list of user-groups. You can also set a boolean value to decide who will be notified. See below.\trecipients:excludedUserIds\tarray\tList of user IDs (of ROQ Platform) who shouldn't be notified. A typical use case is when a user performs an action and all users of the same user-group should be notified, except of the acting user.\trecipients:allUsers\tbool\tIf set to true then all users will be notified.\tdata\tarray\tList of key/value pairs which you can use in the content section of the Notification template","operators#Operators":"AND - Notify all users that are related to all listed user-groups\nOR - Notify all users that are related to any of the user-group"}},"/api-doc/add-users-to-group-api":{"title":"A","data":{"":"To add a user to a user group, you can use the addUsersToUserGroup API . See full specs in the API docRead more about the concept of user groups here: User groups.See the API doc of addUsersToUserGroup\nmutation addUsersToUserGroup(\n$id: ID!,\n$userIds: [ID!]!\n) {\naddUsersToUserGroup(\nid: $id,\nuserIds: $userIds\n)\n}\n\nParameter\tType\tDescription\tid\tUUID\tID of the user group\tuserIds\tarray\tArray of user IDs"}},"/api-doc/fetch-notifications-api":{"title":"notifications()","data":{"":"The notification list UI component fetches notifications using the notifications() query. See full specs in the API doc.\nThis endpoint is available at the client- and server-side APIs.See the API doc of fetch notifications\nquery notifications(page: 0, seen: true) {\ntotalCount\ndata {\n{\n\"id\": \"xyz789\",\n\"createdAt\": \"2007-12-03\",\n\"templateIdentifier\": \"abc123\",\n\"content\": \"xyz789\",\n\"seen\": true,\n\"read\": false,\n\"email\": \"abc123\",\n\"providerId\": \"abc123\",\n\"title\": \"abc123\",\n\"icon\": \"abc123\",\n\"lastSeenDate\": \"xyz789\",\n\"errorId\": \"xyz789\",\n\"errorText\": \"abc123\",\n\"status\": \"sent\",\n\"channel\": \"email\"\n}\n}\n}"}},"/api-doc/create-users-api":{"title":"C","data":{"":"The createUser API is used to synchronize user data to ROQ. This data is needed for two purposesFor the creation of user-specific JWT tokens. These tokens are used for secure interaction between your application and\nROQ. The data is also used to send emails and notifications. For instance, you may want to address your users by\ntheir first name in a notification template: Hi {{recipient.firstName}}It’s your decision which information you wish to synchronize to ROQ. It’s recommended to send the data to ROQ after you\nstore it in your database.See the API doc of createUser\nuserData: {\nreference: \"123\",\nemail: \"john@doe.tech\",\nfirstName: \"John\",\nlastName: \"Doe\",\nisOptedIn: true,\nactive: true,\nlocale: \"en-US\"\n}\n\nconst { id: roqIdentifier } = platform.user.createUser(userData);\nYou need to save the returned ID in your database because the API needs it.\nParameter\tType\tDescription\treference\tstring\tHere you can set your identifier (e.g. the UUID of the user entity in your database). This way you can filter users by your own identifier.\temail\tstring\tEmail of the user\tfirstName\tstring\tFirst name of the user\tlastName\tstring\tLast name of the user\tisOptedIn\tboolean\tSet to true after the user confirm the email.\tactive\tboolean\tSet to true if the user is activate and able to login to your application.\tlocale\tstring\tThe locale represents the language and the country of the user, e.g. en-US means “english in US”. The locale is used for translations of all UI components as well as for sending notifications."}},"/api-doc/Files/files-change-visibility":{"title":"Files Change Visibility","data":{"":"A file can be either public or private. Public means that there is a permanent URL which can be used by anyone, while\nprivate files can only be accessed by user who are allowed to do so. The visibility of a file can be changed in the\nconsole or via API using the makeFilePublic() and makeFilePrivate() methods.","makefilepublic#makeFilePublic()":"To hide a file from public access, you can execute:\n\n\nmutation makeFilePublic($fileId: ID!) {\nmakeFilePublic(fileId: $fileId) {\nid\n}\n}","makefileprivate#makeFilePrivate()":"To enable public access to a file, run:\n\n\nmutation makeFilePrivate($fileId: ID!) {\nmakeFilePrivate(fileId: $fileId) {\nid\n}\n}"}},"/api-doc/Files/change-visibility":{"title":"Change Visibility","data":{"":"A file can be either public or private. Public means that there is a permanent URL which can be used by anyone, while\nprivate files can only be accessed by user who are allowed to do so. The visibility of a file can be changed in the\nconsole or via API using the makeFilePublic() and makeFilePrivate() methods.","makefilepublic#makeFilePublic()":"To hide a file from public access, you can execute:\n\n\nmutation makeFilePublic($fileId: ID!) {\nmakeFilePublic(fileId: $fileId) {\nid\n}\n}","makefileprivate#makeFilePrivate()":"To enable public access to a file, run:\n\n\nmutation makeFilePrivate($fileId: ID!) {\nmakeFilePrivate(fileId: $fileId) {\nid\n}\n}"}},"/api-doc/files/change-visibility":{"title":"Change Visibility","data":{"":"A file can be either public or private. Public means that there is a permanent URL which can be used by anyone, while\nprivate files can only be accessed by user who are allowed to do so. The visibility of a file can be changed in the\nconsole or via API using the makeFilePublic() and makeFilePrivate() methods.","makefilepublic#makeFilePublic()":"To hide a file from public access, you can execute:\n\n\nmutation makeFilePublic($fileId: ID!) {\nmakeFilePublic(fileId: $fileId) {\nid\n}\n}","makefileprivate#makeFilePrivate()":"To enable public access to a file, run:\n\n\nmutation makeFilePrivate($fileId: ID!) {\nmakeFilePrivate(fileId: $fileId) {\nid\n}\n}"}},"/api-doc/files/create-file-upload":{"title":"Create File Upload","data":{"":"Files that are uploaded to ROQ Platform are stored on Scaleway Object Storage. The data center is located in Paris.\nTo upload file via API you need to proceed the following steps. Alternatively you can use ROQ's File DropZone UI\ncomponent.\nGenerate a signed URL using the createFileUpload() API\nUpload file via the signed URL\nSet status of the file using the updateFileStatus() API","createfileupload#createFileUpload()":"The createFileUpload API returns a \"signed URL\" which is then used to upload the file directly from the user's browser\nto the object storage.\n\n\nmutation createFileUpload($createFileDto: FileCreateDto!) {\ncreateFileUpload(createFileDto: $createFileDto) {\nid\nuploadUrl\nformFields\n}\n}","updatefilestatus#updateFileStatus()":"When the upload is finished, you need to set the status of the upload. This is needed because the file is uploaded\ndirectly to the object storage and therefore bypasses ROQ Platform.\n\n\nmutation{\nupdateFileStatus(\nfileId: \"8f628084-7f6f-429b-9137-79620646a9be\",\nstatus: READY\n){\nid\ncreatedAt\nupdatedAt\n}\n}"}}}